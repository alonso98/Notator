// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UpdateNotator.Infrasructure.Data;

namespace UpdateNotator.Infrasructure.Data.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UpdateNotator.Domain.Core.Entries.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Head");

                    b.Property<string>("Text");

                    b.Property<Guid>("TopicId");

                    b.Property<byte>("Type")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Entries","dbo");
                });

            modelBuilder.Entity("UpdateNotator.Domain.Core.Topics.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Topics","dbo");
                });

            modelBuilder.Entity("UpdateNotator.Domain.Core.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatingDate");

                    b.Property<string>("Password");

                    b.Property<byte>("Role")
                        .HasColumnName("Role");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users","dbo");
                });

            modelBuilder.Entity("UpdateNotator.Domain.Core.Entries.Entry", b =>
                {
                    b.OwnsMany("UpdateNotator.Domain.Core.Entries.Link", "Links", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<Guid>("EntryId");

                            b1.Property<string>("NameUrl");

                            b1.Property<string>("Url")
                                .IsRequired();

                            b1.HasKey("Id");

                            b1.HasIndex("EntryId");

                            b1.ToTable("Links","dbo");

                            b1.HasOne("UpdateNotator.Domain.Core.Entries.Entry")
                                .WithMany("Links")
                                .HasForeignKey("EntryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("UpdateNotator.Domain.Core.Users.User", b =>
                {
                    b.OwnsOne("UpdateNotator.Domain.Core.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<string>("EmailAddress")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users","dbo");

                            b1.HasOne("UpdateNotator.Domain.Core.Users.User")
                                .WithOne("Email")
                                .HasForeignKey("UpdateNotator.Domain.Core.Users.Email", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
